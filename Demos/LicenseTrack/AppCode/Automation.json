{
  "Name": "Blazor Server Architecture Configuration",
  "Commands": [
    {
      "Name": "EFRepositoryRefresh",
      "Category": "RefreshEFRepository",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.RefreshEFRepository",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Data.Sql.Model",
        "Folders": [
          {
            "Name": "ExecutionModelFolder",
            "Path": null,
            "Required": false,
            "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
          }
        ],
        "Parameters": [
          {
            "Name": "EFContextClassName",
            "Value": "LicenseTrackContext",
            "Guidance": "Enter the class name of the database context used by entity framework."
          },
          {
            "Name": "EFEntityRemovePrefixes",
            "Value": "Tbl",
            "Guidance": "Comma seperated value list of the prefixes in case sensitive format to be removed from the entity framework entity name when creating new objects."
          },
          {
            "Name": "EFEntityRemoveSuffixes",
            "Value": null,
            "Guidance": "Comma seperated value list of the suffixes in case sensitive format to be removed from the entity framework entity name when creating new objects."
          }
        ],
        "Guidance": "Enter the fully project name for the project that hosts the EF models."
      },
      "Projects": [
        {
          "Name": "EntityProject",
          "ProjectName": "Demo.LicenseTrack.App.Model",
          "Folders": [
            {
              "Name": "EntityFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
            }
          ],
          "Parameters": [
            {
              "Name": "AppModelPrefix",
              "Value": null,
              "Guidance": "Optional, prefix to assign to the application model entity when it is created."
            },
            {
              "Name": "AppModelSuffix",
              "Value": "AppModel",
              "Guidance": "Optional, suffix to assign to the application model entity when it is created."
            },
            {
              "Name": "AppModelValidatorPrefix",
              "Value": null,
              "Guidance": "Optional, prefix to assign to the application model entity validator when it is created."
            },
            {
              "Name": "AppModelValidatorSuffix",
              "Value": "Validator",
              "Guidance": "Optional, suffix to assign to the application model entity validator when it is created."
            }
          ],
          "Guidance": "Enter the full project name for the project that hosts the generated application POCO models that represent the EF Models."
        },
        {
          "Name": "RepoProject",
          "ProjectName": "Demo.LicenseTrack.Data.Sql",
          "Folders": [
            {
              "Name": "RepoFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
            }
          ],
          "Parameters": [
            {
              "Name": "RepositoryPrefix",
              "Value": null,
              "Guidance": "Optional, prefix to assign to the repository when it is created."
            },
            {
              "Name": "RepositorySuffix",
              "Value": "Repository",
              "Guidance": "Optional, suffix to assign to the repository when it is created."
            }
          ],
          "Guidance": "Enter the full project name for the project that hosts the generated repositories that represent the EF Models."
        },
        {
          "Name": "RepoContractProject",
          "ProjectName": "Demo.LicenseTrack.Data.Contracts",
          "Folders": [
            {
              "Name": "RepoContractFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
            }
          ],
          "Parameters": [],
          "Guidance": "Enter the full project name for the project that hosts the interface definition for the repository contract."
        },
        {
          "Name": "IntegrationTestProject",
          "ProjectName": null,
          "Folders": [
            {
              "Name": "IntegrationTestFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
            }
          ],
          "Parameters": [
            {
              "Name": "TestPrefix",
              "Value": null,
              "Guidance": "Optional, prefix to assign to the integration test when it is created."
            },
            {
              "Name": "TestSuffix",
              "Value": "Test",
              "Guidance": "Optional, suffix to assign to the integration test when it is created."
            }
          ],
          "Guidance": "Enter the full project name for the project that hosts the generated integration test for the repository."
        }
      ],
      "Parameters": [],
      "Guidance": null
    },
    {
      "Name": "RefreshRestService",
      "Category": "JsonRestService",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.RefreshRestService",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Logic.Contracts",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use forward slash instead of back slashes."
          }
        ],
        "Parameters": [
          {
            "Name": "ServiceNameRemovePrefixes",
            "Value": null,
            "Guidance": "Optional, provide a comma seperated value of each prefix to check for to be removed from the logic contract name when creating a service name."
          },
          {
            "Name": "ServiceNameRemoveSuffixes",
            "Value": "Logic",
            "Guidance": "Optional, provide a comma seperated value of each suffix to check for to be removed from the logic contract name when creating a service name."
          },
          {
            "Name": "ServiceNameAppendPrefix",
            "Value": null,
            "Guidance": "Optional, provide the prefix to append to the service name."
          },
          {
            "Name": "ServiceClientNameAppendPrefix",
            "Value": null,
            "Guidance": "Optional, provide the prefix to append to the service client name."
          },
          {
            "Name": "ServiceClientNameAppendSuffix",
            "Value": "Client",
            "Guidance": "Optional, provide the suffix to append to the service client name."
          }
        ],
        "Guidance": "Enter the fully project name for the logic contracts project."
      },
      "Projects": [
        {
          "Name": "ServiceProject",
          "ProjectName": "Demo.LicenseTrack.Transport.Rest",
          "Folders": [
            {
              "Name": "ServiceFolder",
              "Path": "Controllers",
              "Required": true,
              "Guidance": "Required, set the relative path from the root of the project where service controllers are hosted. If it is more then one directory deep then use forward slash instead of back slashes."
            }
          ],
          "Parameters": [],
          "Guidance": "Enter the full project name for the project that hosts the WebAPI service implementation of the logic contract."
        },
        {
          "Name": "ModelProject",
          "ProjectName": "Demo.LicenseTrack.Transport.Rest.Model",
          "Folders": [
            {
              "Name": "ModelFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use forward slash instead of back slashes."
            }
          ],
          "Parameters": [],
          "Guidance": "Enter the full project name for the project that hosts the rest service models used by the services."
        },
        {
          "Name": "AbstractionProject",
          "ProjectName": "Demo.LicenseTrack.Client.Transport.Rest",
          "Folders": [
            {
              "Name": "AbstractionFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use forward slah instead of back slashes."
            }
          ],
          "Parameters": [],
          "Guidance": "Enter the full project name for the project that hosts the abstraction implementation of the service."
        },
        {
          "Name": "ContractProject",
          "ProjectName": "Demo.LicenseTrack.Client.Contracts",
          "Folders": [
            {
              "Name": "ContractFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use \u0027/\u0027 instead of back slashes."
            }
          ],
          "Parameters": [],
          "Guidance": "Enter the full project name for the project that hosts interface contracts for the abstraction implementation."
        }
      ],
      "Parameters": [],
      "Guidance": null
    },
    {
      "Name": "RefreshTest",
      "Category": "Testing",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.RefreshTest",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": null,
        "Folders": [],
        "Parameters": [],
        "Guidance": "Enter the name of the project the command will trigger from."
      },
      "Projects": [
        {
          "Name": "TestProject",
          "ProjectName": null,
          "Folders": [],
          "Parameters": [],
          "Guidance": "Enter the name of the project that hosts the MSTest integration testings."
        }
      ],
      "Parameters": [
        {
          "Name": "TestPrefix",
          "Value": null,
          "Guidance": "Optional, prefix to append to the name of the integration test when being created."
        },
        {
          "Name": "TestSuffix",
          "Value": "Test",
          "Guidance": "Optional, Suffix to append to the name of the integration test when being created."
        }
      ],
      "Guidance": "Automation command that generates integration tests from a provided interface."
    },
    {
      "Name": "RefreshFluentValidation",
      "Category": "ModelValidation",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.RefreshFluentValidation",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.App.Model",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "Optional, set the relative path from the root of the project. If it is more then one directory deep then use forward slash instead of back slashes."
          }
        ],
        "Parameters": [
          {
            "Name": "ModelValidatorPrefix",
            "Value": null,
            "Guidance": "The prefix to assign to the name of a models validation class."
          },
          {
            "Name": "ModelValidatorSuffix",
            "Value": "Validator",
            "Guidance": "The suffix to assign to the name of a models validation class."
          }
        ],
        "Guidance": "Enter the fully project name where models have validation to refresh."
      },
      "Projects": [],
      "Parameters": [],
      "Guidance": null
    },
    {
      "Name": "Add Missing Repository Members",
      "Category": "Repository",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.AddMissingRepositoryMembers",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Data.Sql",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "The target folder the respoitory class will be found in."
          }
        ],
        "Parameters": [
          {
            "Name": "ContextName",
            "Value": null,
            "Guidance": "The name of the entity framework context to use with repository methods."
          },
          {
            "Name": "RepositoryPrefix",
            "Value": null,
            "Guidance": "Optional, checks to makes sure the class starts with the provided prefix before considering it a repository."
          },
          {
            "Name": "RepositorySuffix",
            "Value": "Repository",
            "Guidance": "Optional, checks to makes sure the class starts with the provided suffix before considering it a repository."
          }
        ],
        "Guidance": "The project where the repository class file resides in."
      },
      "Projects": [],
      "Parameters": [],
      "Guidance": "Command is used when updating missing members from a repository implementation."
    },
    {
      "Name": "Update Logic Implementation",
      "Category": "Logic",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.UpdateLogicImplementation",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Data.Contracts",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "The target folder where source interface configurations are located."
          }
        ],
        "Parameters": [
          {
            "Name": "RemoveRepoPrefix",
            "Value": null,
            "Guidance": "List of prefixes to be removed from the beginning of the contract name."
          },
          {
            "Name": "RepoSuffix",
            "Value": "Repository",
            "Guidance": "List of suffixes to be removed from the end of the contract name."
          }
        ],
        "Guidance": "The target project the command is executed from."
      },
      "Projects": [
        {
          "Name": "LogicContractProject",
          "ProjectName": "Demo.LicenseTrack.Logic.Contracts",
          "Folders": [
            {
              "Name": "LogicContractProjectFolder",
              "Path": null,
              "Required": false,
              "Guidance": "The target folder where logic contract interfaces are located."
            }
          ],
          "Parameters": [
            {
              "Name": "LogicPrefix",
              "Value": null,
              "Guidance": "The prefix to assign to the name of the logic contract."
            },
            {
              "Name": "LogicSuffix",
              "Value": "Logic",
              "Guidance": "The suffix to assign to the name of the logic contract."
            }
          ],
          "Guidance": "The target project the logic contract is to be located in."
        },
        {
          "Name": "LogicProject",
          "ProjectName": "Demo.LicenseTrack.Logic",
          "Folders": [
            {
              "Name": "LogicProjectFolder",
              "Path": null,
              "Required": false,
              "Guidance": "The target folder where logic is located."
            }
          ],
          "Parameters": [],
          "Guidance": "The target project the logic  is to be located in."
        }
      ],
      "Parameters": [],
      "Guidance": "Clones changes from the respository contract to the logic contract and refreshes the logic implementation."
    },
    {
      "Name": "Add Missing Logic Members",
      "Category": "Logic",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.AddMissingLogicMembers",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Logic",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "The target folder the logic class will be found in."
          }
        ],
        "Parameters": [
          {
            "Name": "LogicPrefix",
            "Value": null,
            "Guidance": "Optional, checks to makes sure the class starts with the provided prefix before considering it a logic."
          },
          {
            "Name": "LogicSuffix",
            "Value": "Logic",
            "Guidance": "Optional, checks to makes sure the class starts with the provided suffix before considering it a logic."
          }
        ],
        "Guidance": "The project where the logic class file resides in."
      },
      "Projects": [],
      "Parameters": [],
      "Guidance": "Command is used when updating missing members from a logic implementation."
    },
    {
      "Name": "Add Missing Controller Members",
      "Category": "Controller",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.AddMissingControllerMembers",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Web.Blazor",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "The target folder the controller class will be found in."
          }
        ],
        "Parameters": [
          {
            "Name": "ControllerPrefix",
            "Value": null,
            "Guidance": "Optional, checks to makes sure the class starts with the provided prefix before considering it a controller."
          },
          {
            "Name": "ControllerSuffix",
            "Value": "Controller",
            "Guidance": "Optional, checks to makes sure the class starts with the provided suffix before considering it a controller."
          }
        ],
        "Guidance": "The project where the controller class file resides in."
      },
      "Projects": [],
      "Parameters": [],
      "Guidance": "Command is used when updating missing members from a controller implementation."
    },
    {
      "Name": "Refresh Logic",
      "Category": "Logic",
      "CommandType": "CodeFactory.Architecture.Blazor.Server.CSharpFile.RefreshLogic",
      "ExecutionProject": {
        "Name": "ExecutionProject",
        "ProjectName": "Demo.LicenseTrack.Logic.Contracts",
        "Folders": [
          {
            "Name": "ExecutionFolder",
            "Path": null,
            "Required": false,
            "Guidance": "Optional, project folder that contains the interface that triggers the automation."
          }
        ],
        "Parameters": [
          {
            "Name": "RemovePrefixes",
            "Value": null,
            "Guidance": "Optional, comma seperated value list of prefix values to remove from the interface name."
          },
          {
            "Name": "RemoveSuffixes",
            "Value": null,
            "Guidance": "Optional, comma seperated value list of suffix values to remove from the interface name."
          }
        ],
        "Guidance": "Project that contains the interface that triggers the automation."
      },
      "Projects": [
        {
          "Name": "LogicProject",
          "ProjectName": "Demo.LicenseTrack.Logic",
          "Folders": [
            {
              "Name": "LogicFolder",
              "Path": null,
              "Required": false,
              "Guidance": "Optional, The project folder the logic class is hosted in."
            }
          ],
          "Parameters": [
            {
              "Name": "LogicPrefix",
              "Value": null,
              "Guidance": "Optional, the prefix to append to the logic class name."
            },
            {
              "Name": "LogicSuffix",
              "Value": null,
              "Guidance": "Optional, the suffix to append to the logic class name."
            }
          ],
          "Guidance": "Name of the project that hosts the logic class to be refreshed."
        }
      ],
      "Parameters": [],
      "Guidance": null
    }
  ]
}